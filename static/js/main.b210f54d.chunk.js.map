{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","result","setResult","valid","setValid","add","character","resultString","toString","length","calculate","str","eval","calculatedResult","e","SyntaxError","name","restart","className","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b210f54d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [result, setResult] = useState('0');\n  const [valid, setValid] = useState('valid');\n\n  let add = (character) => {\n    let resultString = result.toString();\n\n    if(result == '0') {\n      resultString = character;\n    } else if (resultString.length < 12) {\n      resultString += character;\n    }\n    setResult(resultString);\n  }\n\n  let calculate = (str) => {\n    let resultString = result;\n    try {\n      setValid('valid')\n      eval(resultString);\n      let calculatedResult = eval(resultString)\n      setResult(calculatedResult);\n\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        setResult(`${e.name}ðŸ˜­`);\n        setValid('invalid')\n      }\n    }\n  }\n\n  let restart = () => {\n    setValid('valid')\n    setResult('0');\n  }\n\n  return (\n    <>\n      <div className=\"navBar\">\n        <h1>Project 2: Calculator</h1>\n      </div>\n      <div className=\"centering\">\n      <div className=\"calculator-container\">\n        <div className=\"calculator\">\n          <div className=\"screen-section\">\n            <span className={valid}>{result}</span>\n            {valid == 'invalid' && <span className={valid}>Try again, click AC</span>}\n          </div>\n          <div className=\"button-section\">\n            <div className=\"row1 row\">\n              <button type=\"button\" className=\"button\" onClick={() => { restart()} }>AC</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add('(') }}>(</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add(')') }}>)</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add('/') }}>/</button>\n            </div>\n            <div className=\"row2 row\">\n              <button type=\"button\" className=\"button\" onClick={() => { add('7') }}>7</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add('8') }}>8</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add('9') }}>9</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add('*') }}>x</button>\n            </div>\n            <div className=\"row3 row\">\n              <button type=\"button\" className=\"button\" onClick={() => { add('4') }} >4</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add('5') }}>5</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add('6') }}>6</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add('-') }}>-</button>\n            </div>\n            <div className=\"row4 row\">\n              <button type=\"button\" className=\"button\" onClick={() => { add('1') }}>1</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add('2') }}>2</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add('3') }}>3</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add('+') }}>+</button>\n            </div>\n            <div className=\"row5 row\">\n              <button type=\"button\" className=\"button double\" onClick={() => { add('0') }} >0</button>\n              <button type=\"button\" className=\"button\" onClick={() => { add('.') }}>.</button>\n              <button type=\"button\" className=\"button\" onClick={() => { calculate()}}>=</button>\n            </div>\n          \n          </div>\n\n        </div>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}